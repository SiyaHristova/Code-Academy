#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//Създайте функция vzemiBitna. Функцията получава параметър число и индекс.
// Тя връща стойността на бита на съответния индекс.   20210111_2
int vzemiBitna(unsigned int n, int index);

// Създайте функция iz4istiBitna. Тя получава като параметър число и индекс, 
// и прави на нула бита на съответния индекс в числото  20210111_3
void iz4istiBitna(unsigned int *n, int index);

// Създайте функция vdigniBitNa. Тя получава следните параметри - число и индекс. Функцията трябва да "вдига" бита на съответния индекс в числото (под "вдига" 
// ще разбираме да му присвои стойност 1). 20210111_4
void vdigniBitNa(unsigned int *n, int index);

// Създайте функция obarniBitNa. Тя получава следните параметри - число и индекс. Като резултат функцията обръща бита на съответната позиция в
// числото (съответно от 0 на 1 или от 1 на 0) 20210111_5
void obarniBitNa(unsigned int *n, int index);

// Променете стойността на бита на дадено число на определена позиция. 20210111_6
void obarniBitNa(unsigned int *n, int index);

// Занулете всички битове на числата, намиращи се на четна позиция 20210111_7
void obarniBitNa(unsigned int *n, int index);

//  Направете на нула битовете в числа, намиращи се на позиции между 3 и 7 20210111_9
void obarniBitNa(unsigned int *n, int index);

// Вдигнете всички битове на число, на позиции делящи се на 3.  20210111_12
void vdigniBitNa(unsigned int *n, int index);

// Да съберем пак две числа от тип char 255 + 10, да използваме функцията за представяне на числата в двоичен вид:
// 20210113_2
void bin(unsigned n);

/* Напишете функция reverse(s), която обръща символния низ
s. Използвайте я, за да напишете програма, която преобръща входа си ред
по ред.   20210125_10 */
void reverse(char s[]);
void reverseSecond(char *arr);

/*  Напишете програма на С, която чрез функция да обръща
десетични числа в двоични. 20210129_10 */
void decimalToBinary(int a);

/* Напишете програма, която да премахва всички
коментари в една С програма. 20210129_11 */
void rcomment(int a);
void incomment();


/*  Напишете функцията int atof(char *s), която
преобразува стринг в число с десетична запетая. 20210201_2 */
double atof(char *s);

/* void copy(char *to, char *from), която копира една
последователност от символи в друга. 20210201_4 */
void copy(char *to, char *from);

/*  Напишете функция void reverse(char s[]), която обръща низа char s[
]. Използвайте for цикъл с два аргумента, разделени със запетая
i = 0, j = strlen(s) – 1; i < j; i++, j-- , за да обърнете стринга  20210201_8 */
void reverseThird(char *s);

/* Използвайте do-while цикъл, за да напишете функцията void
itoa(int n, char s[ ]), която преобразува число в символен низ (обратната
функция на atoi). 20210201_9 */
void reverse(char *s);
void itoa(int n, char s[]);

/* Напишете функция void itob(int n, char s[], int b), която
преобразува цяло число n в низ s базиран на основа b.
Например itob( n, s[], 16) представя числото n като шеснадесетично число в
стринга s[]. */
void itob(int n, char s[], int b);

/* напишете функция void squeeze(char s[], int c), която
премахва символа с от низа s[]  20210201_11 */
void squeeze(char s1[], int c);

/* напишете функцията int any(char s1[], char s2[]), която
връща първата позиция в низа s1, където се появява някой от
символите в низа s2 (Стандартната библиотечна функция strpbrk
извършва тази функция) 20210201_12 */
int any(char s1[], char s2[]);

/*  напишете функцията void lower(char s[]), която
преобразува главните букви в малки. 20210201_13 */
char *mytoupper(char *s);


/* .Напишете функцията int binarySearch(int a[], int n, int
x), която получава като първи аргумент началото на масив а,
втория аргумент е дължината на масива, а третия аргумент е
числото, което търсим. 20210203_4 */
int binarySearch(int a[], int n, int x);

/* .Напишете функцията size_t my_strlen(char *s), която връща
дължината на стринга подаден в нея. 20210205_2 */
size_t my_strlen(char *s);

/* Първата функция strcpy(s, t), която копира низа t в низа s. 20210205_3 */
void strcpy1(char *s, char *t);

/* Напишете функцията void our_strcat(char *s, char *t), която
добавя (конкатенира) стринга t в края на стринга s. 20210205_5 20210205_6,7 */
int our_strcmp(char *s, char *t);
void our_strcat(char *s, char *t);

/*  Напишете функцията strend(s, t), която връща 1, ако низът t
се среща в края на низа s и 0 ако това не е изпълнено  20210205_8 */
int strend(char *s, char *t);

/* Напишете функцията strncpy(s, t, n), която копира най -
много n символа от t в s  */
void mystrncpy(char *s, char *t, int n);

/* Напишете програма, която чете съобщение, след което го
принтира в обратен ред: 20210210_2 */
void reverse(char *arr);

/* напишете програма, която проверява дали съобщението не е палиндром. Палиндром е съобщение, в
което буквите от ляво на дясно са същите като от дясно на ляво. 20210210_3 */
int pallindrome(char arr[], int n);

/* Дефинирайте функция, която през пойнтери ще извърши
копирането от стринг към стринг 20210215_15 */
void fCopyString(char *to, char *from);

/* Дефинирайте стринг „I am a poor programmer”.
Заменете през пойнтер “poor” с “great”.  20210215_20 */
char* replaceWord(const char* s, const char* oldW, const char* newW);

/* Напишете функция, която сортира лексикографски масив от
символи (char[]) използвайки qsort. 20210215_21 */
void sort(char *s);

/* Пребройте буквите ‚а‘ в стринг (може да е число и масив). 20210217_6 */
int CountCharacters (char *cString, char *cLetter);

/* Напишете програма, която да генерира парола с малки букви (i),
специални символи (j), големи букви (k) и цифри (l), ама разбъркано.
Използвайте функции. 20210217_11 20210217_12 */
void password();
void PassGen(char *cString, int MaxLength);

/* Напишете програма, която да проверява дали 2 стринга (масива) са
анаграми и имат всичките букви на другата дума. Използвайте функции. 20210217_14 */
int check_anagram(char a[], char b[]);